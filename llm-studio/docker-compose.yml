services:
  # MongoDB service
  mongodb:
    image: mongo:latest
    container_name: llm-studio-mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER:-llmstudio}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=llm_studio
    volumes:
      - mongodb-data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')", "-u", "${MONGO_USER:-llmstudio}", "-p", "${MONGO_PASSWORD:-password}", "--authenticationDatabase", "admin"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - llm-studio-network

  llm-api:
    hostname: llm-api
    container_name: llm-studio-llm-api
    build:
      context: ./LLMManager/LLMManager
    ports:
      - "5000:5000"
    volumes:
      - ./LLMManager/LLMManager/models:/app/models
      - ./LLMManager/data:/app/data
    environment:
      - MODEL_DIR=/app/models
      - DATA_DIR=/app/data
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    shm_size: 1gb
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 1G
    command: >
      bash -c "
        python app.py & 
        sleep 6 && 
        ./initialize_models.sh && 
        wait
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - llm-studio-network
  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: llm-studio-backend
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
      llm-api:
        condition: service_healthy
    environment:
      - SECRET_KEY=${SECRET_KEY:-your_jwt_secret_key_change_in_production}
      - MONGO_USER=${MONGO_USER:-llmstudio}
      - MONGO_PASSWORD=${MONGO_PASSWORD:-password}
      - MONGO_HOST=mongodb
      - MONGO_DB=llm_studio
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - LOG_LEVEL=info
      - GOOGLE_MAIL_APP_PASSWORD=${GOOGLE_MAIL_APP_PASSWORD:-1234}
      - GOOGLE_MAIL_USER=${GOOGLE_MAIL_USER:-1234}
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - llm-studio-network

  # Frontend service
  frontend:
    build:
      context: ./frontend
      # Optional: Specify a development stage if your Dockerfile has one
      # target: development
    container_name: llm-studio-frontend
    # Use 'no' or remove 'restart' for development if you prefer manual restarts
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://backend:8000/api # Or http://localhost:8000/api if accessing via nginx from browser
      - CHOKIDAR_USEPOLLING=true # Important for file watching in Docker
      # Add NODE_ENV if your app uses it to differentiate behavior
      - NODE_ENV=development
    ports:
      - "3000:3000" # Map host port 3000 to container port 3000 (React Dev Server default)
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - llm-studio-network
    volumes:
      # Mount your local frontend code into the container's working directory
      - ./frontend:/app
      # Use an anonymous volume to keep node_modules isolated within the container
      # This prevents local node_modules (if any) from overwriting the container's
      # and improves performance.
      - /app/node_modules
    # Override the Dockerfile's CMD to run the development server
    # Ensure 'npm start' in your frontend/package.json runs the dev server (e.g., react-scripts start)
    command: ["npm", "start"]
    stdin_open: true # Keep stdin open for the dev server process
    tty: true 
  # Nginx service
  nginx:
    image: nginx:alpine
    container_name: llm-studio-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - llm-studio-network



networks:
  llm-studio-network:
    driver: bridge

# Define volumes
volumes:
  mongodb-data:

