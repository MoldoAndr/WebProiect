============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.3, pluggy-0.13.0
rootdir: /home/andrei/WebProiect/llm-studio/tests/app
plugins: asyncio-0.21.1, typeguard-4.4.1, anyio-3.7.1
asyncio: mode=strict
collected 0 items / 1 error

==================================== ERRORS ====================================
_________________________ ERROR collecting database.py _________________________
ImportError while importing test module '/home/andrei/WebProiect/llm-studio/tests/app/database.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
database.py:5: in <module>
    from test_config import TEST_ENV
E   ImportError: cannot import name 'TEST_ENV' from 'test_config' (/home/andrei/WebProiect/llm-studio/tests/app/test_config.py)
=========================== short test summary info ============================
ERROR database.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.12s ===============================
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.3, pluggy-0.13.0
rootdir: /home/andrei/WebProiect/llm-studio/tests/app
plugins: asyncio-0.21.1, typeguard-4.4.1, anyio-3.7.1
asyncio: mode=strict
collected 6 items

test_backend_api.py FEEEEE                                               [100%]

==================================== ERRORS ====================================
_____________________ ERROR at setup of test_user_profile ______________________

    @pytest.fixture
    def user_token():
        """Get regular user auth token"""
        # Check if we should use JSON or form data
        # Try JSON first
        response = requests.post(
            f"{BACKEND_URL}/auth/login",
            json={"username": TEST_USER["username"], "password": TEST_USER["password"]}
        )
    
        # If that fails, try form data
        if response.status_code != 200:
            print(f"JSON login failed with {response.status_code}. Trying form data...")
            response = requests.post(
                f"{BACKEND_URL}/auth/login",
                data={"username": TEST_USER["username"], "password": TEST_USER["password"]}
            )
    
>       assert response.status_code == 200, f"User login failed: {response.text}"
E       AssertionError: User login failed: {"detail":"Not Found"}
E       assert 404 == 200
E        +  where 404 = <Response [404]>.status_code

test_backend_api.py:46: AssertionError
---------------------------- Captured stdout setup -----------------------------
JSON login failed with 404. Trying form data...
___________________ ERROR at setup of test_admin_list_users ____________________

    @pytest.fixture
    def admin_token():
        """Get admin auth token"""
        # Check if we should use JSON or form data
        # Try JSON first
        response = requests.post(
            f"{BACKEND_URL}/auth/login",
            json={"username": TEST_ADMIN["username"], "password": TEST_ADMIN["password"]}
        )
    
        # If that fails, try form data
        if response.status_code != 200:
            print(f"JSON login failed with {response.status_code}. Trying form data...")
            response = requests.post(
                f"{BACKEND_URL}/auth/login",
                data={"username": TEST_ADMIN["username"], "password": TEST_ADMIN["password"]}
            )
    
>       assert response.status_code == 200, f"Admin login failed: {response.text}"
E       AssertionError: Admin login failed: {"detail":"Not Found"}
E       assert 404 == 200
E        +  where 404 = <Response [404]>.status_code

test_backend_api.py:25: AssertionError
---------------------------- Captured stdout setup -----------------------------
JSON login failed with 404. Trying form data...
__________________ ERROR at setup of test_create_conversation __________________

    @pytest.fixture
    def user_token():
        """Get regular user auth token"""
        # Check if we should use JSON or form data
        # Try JSON first
        response = requests.post(
            f"{BACKEND_URL}/auth/login",
            json={"username": TEST_USER["username"], "password": TEST_USER["password"]}
        )
    
        # If that fails, try form data
        if response.status_code != 200:
            print(f"JSON login failed with {response.status_code}. Trying form data...")
            response = requests.post(
                f"{BACKEND_URL}/auth/login",
                data={"username": TEST_USER["username"], "password": TEST_USER["password"]}
            )
    
>       assert response.status_code == 200, f"User login failed: {response.text}"
E       AssertionError: User login failed: {"detail":"Not Found"}
E       assert 404 == 200
E        +  where 404 = <Response [404]>.status_code

test_backend_api.py:46: AssertionError
---------------------------- Captured stdout setup -----------------------------
JSON login failed with 404. Trying form data...
__________________ ERROR at setup of test_list_conversations ___________________

    @pytest.fixture
    def user_token():
        """Get regular user auth token"""
        # Check if we should use JSON or form data
        # Try JSON first
        response = requests.post(
            f"{BACKEND_URL}/auth/login",
            json={"username": TEST_USER["username"], "password": TEST_USER["password"]}
        )
    
        # If that fails, try form data
        if response.status_code != 200:
            print(f"JSON login failed with {response.status_code}. Trying form data...")
            response = requests.post(
                f"{BACKEND_URL}/auth/login",
                data={"username": TEST_USER["username"], "password": TEST_USER["password"]}
            )
    
>       assert response.status_code == 200, f"User login failed: {response.text}"
E       AssertionError: User login failed: {"detail":"Not Found"}
E       assert 404 == 200
E        +  where 404 = <Response [404]>.status_code

test_backend_api.py:46: AssertionError
---------------------------- Captured stdout setup -----------------------------
JSON login failed with 404. Trying form data...
______________________ ERROR at setup of test_send_prompt ______________________

    @pytest.fixture
    def user_token():
        """Get regular user auth token"""
        # Check if we should use JSON or form data
        # Try JSON first
        response = requests.post(
            f"{BACKEND_URL}/auth/login",
            json={"username": TEST_USER["username"], "password": TEST_USER["password"]}
        )
    
        # If that fails, try form data
        if response.status_code != 200:
            print(f"JSON login failed with {response.status_code}. Trying form data...")
            response = requests.post(
                f"{BACKEND_URL}/auth/login",
                data={"username": TEST_USER["username"], "password": TEST_USER["password"]}
            )
    
>       assert response.status_code == 200, f"User login failed: {response.text}"
E       AssertionError: User login failed: {"detail":"Not Found"}
E       assert 404 == 200
E        +  where 404 = <Response [404]>.status_code

test_backend_api.py:46: AssertionError
---------------------------- Captured stdout setup -----------------------------
JSON login failed with 404. Trying form data...
=================================== FAILURES ===================================
_____________________________ test_health_endpoint _____________________________

    def test_health_endpoint():
        """Test health endpoint"""
        response = requests.get(f"{BACKEND_URL}/health")
>       assert response.status_code == 200
E       assert 404 == 200
E        +  where 404 = <Response [404]>.status_code

test_backend_api.py:52: AssertionError
=========================== short test summary info ============================
FAILED test_backend_api.py::test_health_endpoint - assert 404 == 200
ERROR test_backend_api.py::test_user_profile - AssertionError: User login fai...
ERROR test_backend_api.py::test_admin_list_users - AssertionError: Admin logi...
ERROR test_backend_api.py::test_create_conversation - AssertionError: User lo...
ERROR test_backend_api.py::test_list_conversations - AssertionError: User log...
ERROR test_backend_api.py::test_send_prompt - AssertionError: User login fail...
========================= 1 failed, 5 errors in 0.10s ==========================
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.3, pluggy-0.13.0
rootdir: /home/andrei/WebProiect/llm-studio/tests/app
plugins: asyncio-0.21.1, typeguard-4.4.1, anyio-3.7.1
asyncio: mode=strict
collected 0 items / 1 error

==================================== ERRORS ====================================
________________________ ERROR collecting user_test.py _________________________
ImportError while importing test module '/home/andrei/WebProiect/llm-studio/tests/app/user_test.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
user_test.py:6: in <module>
    from app.main import app
E   ModuleNotFoundError: No module named 'app.main'
=========================== short test summary info ============================
ERROR user_test.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.34s ===============================
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.3, pluggy-0.13.0
rootdir: /home/andrei/WebProiect/llm-studio/tests/app
plugins: asyncio-0.21.1, typeguard-4.4.1, anyio-3.7.1
asyncio: mode=strict
collected 0 items

============================ no tests ran in 0.00s =============================
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.3, pluggy-0.13.0
rootdir: /home/andrei/WebProiect/llm-studio/tests/app
plugins: asyncio-0.21.1, typeguard-4.4.1, anyio-3.7.1
asyncio: mode=strict
collected 12 items

test_all.py FFF.EEEEEEEE                                                 [100%]

==================================== ERRORS ====================================
_______________ ERROR at setup of TestUsers.test_admin_get_users _______________

    @pytest.fixture
    def admin_token():
        if "admin" not in tokens:
            response = requests.post(
                f"{BASE_URL}/auth/login",
                data={"username": "admin", "password": "password"}
            )
>           assert response.status_code == 200
E           assert 401 == 200
E            +  where 401 = <Response [401]>.status_code

test_all.py:17: AssertionError
__________ ERROR at setup of TestUsers.test_user_forbidden_get_users ___________

    @pytest.fixture
    def user_token():
        if "user" not in tokens:
            response = requests.post(
                f"{BASE_URL}/auth/login",
                data={"username": "user", "password": "password"}
            )
>           assert response.status_code == 200
E           assert 401 == 200
E            +  where 401 = <Response [401]>.status_code

test_all.py:39: AssertionError
_________________ ERROR at setup of TestUsers.test_user_get_me _________________

    @pytest.fixture
    def user_token():
        if "user" not in tokens:
            response = requests.post(
                f"{BASE_URL}/auth/login",
                data={"username": "user", "password": "password"}
            )
>           assert response.status_code == 200
E           assert 401 == 200
E            +  where 401 = <Response [401]>.status_code

test_all.py:39: AssertionError
___________________ ERROR at setup of TestLLMs.test_get_llms ___________________

    @pytest.fixture
    def user_token():
        if "user" not in tokens:
            response = requests.post(
                f"{BASE_URL}/auth/login",
                data={"username": "user", "password": "password"}
            )
>           assert response.status_code == 200
E           assert 401 == 200
E            +  where 401 = <Response [401]>.status_code

test_all.py:39: AssertionError
____________ ERROR at setup of TestLLMs.test_technician_modify_llm _____________

    @pytest.fixture
    def tech_token():
        if "technician" not in tokens:
            response = requests.post(
                f"{BASE_URL}/auth/login",
                data={"username": "technician", "password": "password"}
            )
>           assert response.status_code == 200
E           assert 401 == 200
E            +  where 401 = <Response [401]>.status_code

test_all.py:28: AssertionError
__________ ERROR at setup of TestLLMs.test_user_forbidden_modify_llm ___________

    @pytest.fixture
    def user_token():
        if "user" not in tokens:
            response = requests.post(
                f"{BASE_URL}/auth/login",
                data={"username": "user", "password": "password"}
            )
>           assert response.status_code == 200
E           assert 401 == 200
E            +  where 401 = <Response [401]>.status_code

test_all.py:39: AssertionError
_________ ERROR at setup of TestConversations.test_create_conversation _________

    @pytest.fixture
    def user_token():
        if "user" not in tokens:
            response = requests.post(
                f"{BASE_URL}/auth/login",
                data={"username": "user", "password": "password"}
            )
>           assert response.status_code == 200
E           assert 401 == 200
E            +  where 401 = <Response [401]>.status_code

test_all.py:39: AssertionError
____________ ERROR at setup of TestConversations.test_send_message _____________

    @pytest.fixture
    def user_token():
        if "user" not in tokens:
            response = requests.post(
                f"{BASE_URL}/auth/login",
                data={"username": "user", "password": "password"}
            )
>           assert response.status_code == 200
E           assert 401 == 200
E            +  where 401 = <Response [401]>.status_code

test_all.py:39: AssertionError
=================================== FAILURES ===================================
__________________________ TestAuth.test_login_admin ___________________________

self = <test_all.TestAuth object at 0x7afd974ce5c0>

    def test_login_admin(self):
        response = requests.post(
            f"{BASE_URL}/auth/login",
            data={"username": "admin", "password": "password"}
        )
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401]>.status_code

test_all.py:76: AssertionError
________________________ TestAuth.test_login_technician ________________________

self = <test_all.TestAuth object at 0x7afd974ce560>

    def test_login_technician(self):
        response = requests.post(
            f"{BASE_URL}/auth/login",
            data={"username": "technician", "password": "password"}
        )
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401]>.status_code

test_all.py:84: AssertionError
___________________________ TestAuth.test_login_user ___________________________

self = <test_all.TestAuth object at 0x7afd974ce770>

    def test_login_user(self):
        response = requests.post(
            f"{BASE_URL}/auth/login",
            data={"username": "user", "password": "password"}
        )
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401]>.status_code

test_all.py:92: AssertionError
=========================== short test summary info ============================
FAILED test_all.py::TestAuth::test_login_admin - assert 401 == 200
FAILED test_all.py::TestAuth::test_login_technician - assert 401 == 200
FAILED test_all.py::TestAuth::test_login_user - assert 401 == 200
ERROR test_all.py::TestUsers::test_admin_get_users - assert 401 == 200
ERROR test_all.py::TestUsers::test_user_forbidden_get_users - assert 401 == 200
ERROR test_all.py::TestUsers::test_user_get_me - assert 401 == 200
ERROR test_all.py::TestLLMs::test_get_llms - assert 401 == 200
ERROR test_all.py::TestLLMs::test_technician_modify_llm - assert 401 == 200
ERROR test_all.py::TestLLMs::test_user_forbidden_modify_llm - assert 401 == 200
ERROR test_all.py::TestConversations::test_create_conversation - assert 401 =...
ERROR test_all.py::TestConversations::test_send_message - assert 401 == 200
==================== 3 failed, 1 passed, 8 errors in 2.09s =====================
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.3, pluggy-0.13.0
rootdir: /home/andrei/WebProiect/llm-studio/tests/app
plugins: asyncio-0.21.1, typeguard-4.4.1, anyio-3.7.1
asyncio: mode=strict
collected 1 item

test_integration.py F                                                    [100%]

=================================== FAILURES ===================================
__________________________ test_full_integration_flow __________________________

    def test_full_integration_flow():
        """Test the full application flow"""
        # Step 1: Login
        response = requests.post(
            f"{BACKEND_URL}/auth/login",
            data={"username": TEST_USER["username"], "password": TEST_USER["password"]}
        )
>       assert response.status_code == 200
E       assert 404 == 200
E        +  where 404 = <Response [404]>.status_code

test_integration.py:14: AssertionError
=========================== short test summary info ============================
FAILED test_integration.py::test_full_integration_flow - assert 404 == 200
============================== 1 failed in 0.08s ===============================
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.3, pluggy-0.13.0
rootdir: /home/andrei/WebProiect/llm-studio/tests/app
plugins: asyncio-0.21.1, typeguard-4.4.1, anyio-3.7.1
asyncio: mode=strict
collected 1 item

test_auth.py .                                                           [100%]

============================== 1 passed in 0.26s ===============================
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.3, pluggy-0.13.0
rootdir: /home/andrei/WebProiect/llm-studio/tests/app
plugins: asyncio-0.21.1, typeguard-4.4.1, anyio-3.7.1
asyncio: mode=strict
collected 4 items

test_llm_api.py .EEE                                                     [100%]

==================================== ERRORS ====================================
_______________________ ERROR at setup of test_list_llms _______________________

    @pytest.fixture
    def tech_token():
        """Get technician auth token from backend"""
>       from test_backend_api import tech_token as get_tech_token
E       ImportError: cannot import name 'tech_token' from 'test_backend_api' (/home/andrei/WebProiect/llm-studio/tests/app/test_backend_api.py)

test_llm_api.py:16: ImportError
_____________________ ERROR at setup of test_get_llm_by_id _____________________

    @pytest.fixture
    def tech_token():
        """Get technician auth token from backend"""
>       from test_backend_api import tech_token as get_tech_token
E       ImportError: cannot import name 'tech_token' from 'test_backend_api' (/home/andrei/WebProiect/llm-studio/tests/app/test_backend_api.py)

test_llm_api.py:16: ImportError
_______________ ERROR at setup of test_create_update_delete_llm ________________
Fixture "admin_token" called directly. Fixtures are not meant to be called directly,
but are created automatically when test functions request them as parameters.
See https://docs.pytest.org/en/stable/explanation/fixtures.html for more information about fixtures, and
https://docs.pytest.org/en/stable/deprecations.html#calling-fixtures-directly about how to update your code.
=========================== short test summary info ============================
ERROR test_llm_api.py::test_list_llms - ImportError: cannot import name 'tech...
ERROR test_llm_api.py::test_get_llm_by_id - ImportError: cannot import name '...
ERROR test_llm_api.py::test_create_update_delete_llm - Failed: Fixture "admin...
========================= 1 passed, 3 errors in 0.09s ==========================
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.3, pluggy-0.13.0
rootdir: /home/andrei/WebProiect/llm-studio/tests/app
plugins: asyncio-0.21.1, typeguard-4.4.1, anyio-3.7.1
asyncio: mode=strict
collected 0 items

============================ no tests ran in 0.00s =============================
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.3, pluggy-0.13.0
rootdir: /home/andrei/WebProiect/llm-studio/tests/app
plugins: asyncio-0.21.1, typeguard-4.4.1, anyio-3.7.1
asyncio: mode=strict
collected 0 items

============================ no tests ran in 0.09s =============================
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.3, pluggy-0.13.0
rootdir: /home/andrei/WebProiect/llm-studio/tests/app
plugins: asyncio-0.21.1, typeguard-4.4.1, anyio-3.7.1
asyncio: mode=strict
collected 0 items

============================ no tests ran in 0.00s =============================
